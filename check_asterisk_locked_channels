#!/bin/sh

# Check asterisk channels for length > 9:59:59 plugin for Nagios.
# Original Written by Chad Phillips (chad@apartmentlines.com)
# Modified by Bryan Nelson for length check (bnelson@fluentstream.com)
# Last Modified: 2013-08-06
# Modified by Joshua Elson for format and length analysis
# Last Modified: 2014-05-11

PROGPATH=`dirname $0`
REVISION=`echo '$Revision: 1 $' | sed -e 's/[^0-9.]//g'`
DATETIME=`date "+%Y-%m-%d %H:%M:%S"`
TAB="	"

# seconds to indicate we have a stuck channel
stuck_length=$((10*60*60))

#. $PROGPATH/utils.sh

print_usage() {
    echo "
Usage: check_asterisk_locked_channels [-w <max_channels>] [-c <max_channels>]
Usage: check_asterisk_locked_channels --help | -h

Description:

This plugin checks an asterisk server for locked Channels.
Any channel over 9:59:59 is considered to be in a locked state.

Tested to work on Linux.

The following arguments are accepted:

  -w              (Optional) Generate a warning message if the defined number
                  channels is exceeded.

  -c              (Optional) Generate a critical message if the defined number
                  channels is exceeded.

  --help | -h     Print this help and exit.

Examples:

Check channels for anything over 9:59:59, with no concern about limits.

  check_asterisk_locked_channels

Check channels/calls.  Issue a warning if there is more than 1 'locked'
channel, and a critical if there are more than 3 'locked' channels.

  check_asterisk_locked_channels -w 1 -c 3
"
}

print_help() {
    print_usage
    echo "Check asterisk locked channels plugin for Nagios."
    echo ""
}

# Sets the exit status for the plugin.  This is done in such a way that the
# status can only go in one direction: OK -> WARNING -> CRITICAL.
set_exit_status() {
	new_status=$1
	# Nothing needs to be done if the state is already critical, so exclude
	# that case.
	# echo "Changing exit status to $new_status from exit status $exitstatus"
	case "$exitstatus"
	in
		WARNING)
			# Only upgrade from warning to critical.
			if [ "$new_status" = "$STATE_CRITICAL" ]; then
				exitstatus=$new_status;
			fi
		;;
		OK)
			# Always update state if current state is OK.
			exitstatus=$new_status;
		;;
	esac
}

# Ensures that a call to the Asterisk process returns successfully.  Exits
# critical if not.
check_asterisk_result() {
	if [ "$1" != "0" ]; then
		exit $STATE_CRITICAL
	fi
}

# Defaults.

STATE_OK=OK
STATE_WARNING=WARNING
STATE_CRITICAL=CRITICAL

exitstatus=$STATE_OK
lockchan_warning=-1
lockchan_critical=-1

# Grab the command line arguments.
while test -n "$1"; do
    case "$1" in
        --help)
            print_help
            exit $STATE_OK
            ;;
        -h)
            print_help
            exit $STATE_OK
            ;;
        -w)
            lockchan_warning=$2
            shift
            ;;
        -c)
            lockchan_critical=$2
            shift
            ;;
        -x)
            exitstatus=$2
            shift
            ;;
        --exitstatus)
            exitstatus=$2
            shift
            ;;
        *)
            echo "Unknown argument: $1"
            print_usage
            exit $STATE_UNKNOWN
            ;;
    esac
    shift
done

# Sanity checking for arguments.
if [ "$lockchan_warning" != "-1" ] && ([ ! "$lockchan_warning" ] || [ `echo "$lockchan_warning" | grep [^0-9]` ]); then
	echo "Number of channels warning value must be a number."
	exit $STATE_UNKNOWN
fi

if [ "$lockchan_critical" != "-1" ] && ([ ! "$lockchan_critical" ] || [ `echo "$lockchan_critical" | grep [^0-9]` ]); then
	echo "Number of channels critical value must be a number."
	exit $STATE_UNKNOWN
fi

if [ "$lockchan_warning" != "-1" ] && [ "$lockchan_critical" != "-1" ] && [ "$lockchan_warning" -ge "$lockchan_critical" ]; then
	echo "Critical channels must be greater than warning channels."
	exit $STATE_UNKNOWN
fi


# Fetch the data from asterisk.
command_output=`asterisk -rx "core show channels concise" | grep '!' | grep -v 'Privilege escalation' | sort -r -g -t '!' -k 12 | cut -d '!' -f1,12`
#echo "$command_output"

# Full command for debugging:
# asterisk -rx "core show channels concise" | grep '!' | grep -v 'Privilege escalation' | sort -r -g -t '!' -k 12 | cut -d '!' -f12,1

stuck_channel_output=
lockchan_count=0

# Figure out if we have any stuck channels
for line in $command_output; do
	IFS='!' read -a array_out <<< "$line"
	channel_name="${array_out[0]}"
	channel_time="${array_out[1]}"
	# echo "Channel with $channel_name has been up for $channel_time seconds"
	if [ "$channel_time" -gt "$stuck_length" ]; then
		lockchan_count=$(($lockchan_count+1))
		# echo "This channel is stuck $channel_name"
		stuck_channel_output="[$channel_name,$channel_time] $stuck_channel_output"
	else
		# All channels from here on out (because of sort) will be good. Break.
		break
	fi
done

# Decrement the counters so our "-gt"s work as expected
lockchan_critical=$(($lockchan_critical-1))
lockchan_warning=$(($lockchan_warning-1))

# Test for warning/critical channels.
if [ "$lockchan_critical" -gt "-1" ] && [ "$lockchan_count" -gt "$lockchan_critical" ]; then
	set_exit_status $STATE_CRITICAL
elif [ "$lockchan_warning" -gt "-1" ] && [ "$lockchan_count" -gt "$lockchan_warning" ]; then
	set_exit_status $STATE_WARNING
elif [ "$lockchan_count" = "0" ]; then
	# echo "Setting exit status to $STATE_OK"
        set_exit_status $STATE_OK
fi

case $exitstatus
in
	CRITICAL)
		exit_code=2;
		exit_message="CRITICAL";
	;;
	WARNING)
		exit_code=1;
		exit_message="WARNING";
	;;
	OK)
		exit_code=0;
		exit_message="OK";
	;;
	*)
		exit_code=3;
		exit $STATE_UNKNOWN;
		
	;;
esac

echo "${exit_message}: $lockchan_count Locked Channels, $stuck_channel_output | ${DATETIME}";

exit $exit_code

